---
- name: Get a device using the tower network ui api
  hosts: tower
  gather_facts: false
  roles:
      - tower_network
  tasks:
    - range:
        start: 0
        end: 2000
        increment: 200
        var: leaf_range
    - range:
        start: 400
        end: 1600
        increment: 200
        var: spine_range
    - range:
        start: 1
        end: "{{leaf_range|length + 1}}"
        increment: 1
        var: leaf_id_range
    - range:
        start: "{{leaf_range|length + 1}}"
        end: "{{leaf_range|length + spine_range|length + 1}}"
        increment: 1
        var: spine_id_range
    - zip:
        p: "{{leaf_id_range}}"
        q: "{{leaf_range}}"
        var: leaf_range
    - zip:
        p: "{{spine_id_range}}"
        q: "{{spine_range}}"
        var: spine_range
    - create_device:
        topology: 6
        name: "Leaf{{item.0}}"
        x: "{{item.1}}"
        y: 1000
        id: "{{item.0}}"
        device_type: switch
        var: new_device
      with_items:
          - "{{leaf_range}}"
      register: leaves
    - create_device:
        topology: 6
        name: "Spine{{item.0}}"
        x: "{{item.1}}"
        y: 500
        id: "{{item.0}}"
        device_type: switch
        var: new_device
      with_items:
          - "{{spine_range}}"
      register: spines
    - map:
        list: "{{leaves.results}}"
        attribute: ansible_facts.new_device
        var: leaves2
    - map:
        list: "{{spines.results}}"
        attribute: ansible_facts.new_device
        var: spines2
    - debug:
        msg: "leaves {{leaves2}}"
    - debug:
        msg: "spines {{spines2}}"
    - product:
        p: "{{spines2}}"
        q: "{{leaves2}}"
        var: spines_leaves
    - enumerate:
        list: "{{spines_leaves}}"
        var: spines_leaves
    - debug:
        msg: "spines_leaves {{spines_leaves}}"
    - create_interface:
        name: "eth{{item.0}}"
        device: "{{item.1.0.device_id}}"
        id: "{{item.0}}"
        var: new_interface
      with_items:
          - "{{spines_leaves}}"
      register: spine_interfaces
    - create_interface:
        name: "eth{{item.0}}"
        device: "{{item.1.1.device_id}}"
        id: "{{item.0}}"
        var: new_interface
      with_items:
          - "{{spines_leaves}}"
      register: leaf_interfaces
    - map:
        list: "{{spine_interfaces.results}}"
        attribute: ansible_facts.new_interface
        var: spine_interfaces2
    - map:
        list: "{{leaf_interfaces.results}}"
        attribute: ansible_facts.new_interface
        var: leaf_interfaces2
    - debug:
        msg: "spine_interfaces {{spine_interfaces2}}"
    - debug:
        msg: "leaf_interfaces {{leaf_interfaces2}}"
    - zip:
        p: "{{spine_interfaces2}}"
        q: "{{leaf_interfaces2}}"
        var: spine_leaf_interfaces
    - enumerate:
        list: "{{spine_leaf_interfaces}}"
        var: spine_leaf_interfaces
    - debug:
        msg: "spine_leaf_interfaces {{spine_leaf_interfaces}}"
    - create_link:
        id: "{{item.0}}"
        from_device: "{{item.1.0.device}}"
        to_device: "{{item.1.1.device}}"
        from_interface: "{{item.1.0.interface_id}}"
        to_interface: "{{item.1.1.interface_id}}"
        name: "link"
        var: new_link
      with_items:
          - "{{spine_leaf_interfaces}}"

